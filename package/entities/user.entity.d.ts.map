{"version":3,"sources":["../src/entities/user.entity.ts"],"names":[],"mappings":"AAYA,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAE9C,qBACa,IAAI;IAEb,EAAE,EAAE,MAAM,CAAC;IAKX,QAAQ,EAAE,MAAM,CAAC;IAMjB,KAAK,EAAE,MAAM,CAAC;IAMd,MAAM,EAAE,MAAM,CAAC;IAGf,QAAQ,EAAE,MAAM,CAAC;IAGjB,SAAS,EAAE,QAAQ,EAAE,CAAC;IAKtB,MAAM,EAAE,OAAO,CAAC;IAKhB,OAAO,EAAE,OAAO,CAAC;IAMjB,KAAK,EAAE,IAAI,EAAE,CAAC;IAMd,aAAa,EAAE,YAAY,EAAE,CAAC;IAY9B,UAAU,EAAE,MAAM,CAAC;IAYnB,UAAU,EAAE,MAAM,CAAC;CACtB","file":"user.entity.d.ts","sourcesContent":["import * as moment from 'moment';\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    OneToMany,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n} from 'typeorm';\n\nimport { Organization } from './organization.entity';\nimport { Role } from './role.entity';\nimport { UserInfo } from './user-info.entity';\n\n@Entity('user')\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        unique: true\n    })\n    username: string;\n\n    @Column({\n        unique: true,\n        nullable: true\n    })\n    email: string;\n\n    @Column({\n        unique: true,\n        nullable: true\n    })\n    mobile: string;\n\n    @Column()\n    password: string;\n\n    @OneToMany(type => UserInfo, userInfo => userInfo.user)\n    userInfos: UserInfo[];\n\n    @Column({\n        default: false\n    })\n    banned: boolean;\n\n    @Column({\n        default: false\n    })\n    recycle: boolean;\n\n    @ManyToMany(type => Role, role => role.users, {\n        onDelete: 'CASCADE'\n    })\n    @JoinTable()\n    roles: Role[];\n\n    @ManyToMany(type => Organization, organization => organization.users, {\n        onDelete: 'CASCADE'\n    })\n    @JoinTable()\n    organizations: Organization[];\n\n    @CreateDateColumn({\n        transformer: {\n            from: (date: Date) => {\n                return moment(date).format('YYYY-MM-DD HH:mm:ss');\n            },\n            to: () => {\n                return new Date();\n            }\n        }\n    })\n    createTime: string;\n\n    @UpdateDateColumn({\n        transformer: {\n            from: (date: Date) => {\n                return moment(date).format('YYYY-MM-DD HH:mm:ss');\n            },\n            to: () => {\n                return new Date();\n            }\n        }\n    })\n    updateTime: string;\n}"]}