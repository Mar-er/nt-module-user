{"version":3,"sources":["../src/user.module.ts"],"names":[],"mappings":"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","file":"user.module.js","sourcesContent":["import { DynamicModule, Global, Inject, Module, OnModuleInit } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ModulesContainer } from '@nestjs/core/injector/modules-container';\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\nimport { InjectRepository, TypeOrmModule } from '@nestjs/typeorm';\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\nimport { __ as t, configure as i18nConfigure } from 'i18n';\nimport { join } from 'path';\nimport { In, Not, Repository } from 'typeorm';\n\nimport { AuthGurad } from './auth/auth.gurad';\nimport { AuthService } from './auth/auth.service';\nimport { PERMISSION_DEFINITION, RESOURCE_DEFINITION } from './decorators';\nimport { InfoGroup } from './entities/info-group.entity';\nimport { InfoItem } from './entities/info-item.entity';\nimport { Organization } from './entities/organization.entity';\nimport { Permission } from './entities/permission.entity';\nimport { Resource } from './entities/resource.entity';\nimport { Role } from './entities/role.entity';\nimport { UserInfo } from './entities/user-info.entity';\nimport { User } from './entities/user.entity';\nimport { InfoGroupResolver } from './resolvers/info-group.resolver';\nimport { InfoItemResolver } from './resolvers/info-item.resolver';\nimport { OrganizationResolver } from './resolvers/organization.resolver';\nimport { ResourceResolver } from './resolvers/resource.resolver';\nimport { RoleResolver } from './resolvers/role.resolver';\nimport { UserResolver } from './resolvers/user.resolver';\nimport { EntityCheckService } from './services/entity-check.service';\nimport { InfoGroupService } from './services/info-group.service';\nimport { InfoItemService } from './services/info-item.service';\nimport { OrganizationService } from './services/organization.service';\nimport { ResourceService } from './services/resource.service';\nimport { RoleService } from './services/role.service';\nimport { UserService } from './services/user.service';\nimport { CryptoUtil } from './utils/crypto.util';\n\n@Global()\n@Module({\n    imports: [\n        TypeOrmModule.forFeature([Organization, User, Role, Resource, Permission, InfoGroup, InfoItem, UserInfo])\n    ],\n    controllers: [],\n    providers: [\n        { provide: APP_GUARD, useClass: AuthGurad },\n        AuthService,\n        EntityCheckService,\n        OrganizationResolver, OrganizationService,\n        UserResolver, UserService,\n        RoleResolver, RoleService,\n        ResourceResolver, ResourceService,\n        InfoGroupResolver, InfoGroupService,\n        InfoItemResolver, InfoItemService,\n        CryptoUtil\n    ],\n    exports: [AuthService, OrganizationService, UserService, RoleService, InfoGroupService, InfoItemService]\n})\nexport class UserModule implements OnModuleInit {\n    private readonly metadataScanner: MetadataScanner;\n\n    constructor(\n        @Inject(UserService) private readonly userService: UserService,\n        @Inject(ModulesContainer) private readonly modulesContainer: ModulesContainer,\n        @InjectRepository(Resource) private readonly resourceRepo: Repository<Resource>,\n        @InjectRepository(Permission) private readonly permissionRepo: Repository<Permission>,\n        @InjectRepository(Role) private readonly roleRepo: Repository<Role>,\n        @InjectRepository(InfoGroup) private readonly infoGroupRepo: Repository<InfoGroup>,\n        @InjectRepository(User) private readonly userRepo: Repository<User>\n    ) {\n        this.metadataScanner = new MetadataScanner();\n    }\n\n    static forRoot(options: { i18n: 'en-US' | 'zh-CN' }): DynamicModule {\n        if (!existsSync('src/i18n')) {\n            mkdirSync(join('src/i18n'));\n            writeFileSync(join('src/i18n', 'zh-CN.json'), readFileSync(__dirname + '/i18n/zh-CN.json'));\n            writeFileSync(join('src/i18n', 'en-US.json'), readFileSync(__dirname + '/i18n/en-US.json'));\n        }\n        i18nConfigure({\n            locales: ['en-US', 'zh-CN'],\n            defaultLocale: options.i18n,\n            directory: 'src/i18n'\n        });\n        return {\n            module: UserModule\n        };\n    }\n\n    async onModuleInit() {\n        await this.loadResourcesAndPermissions();\n        await this.createDefaultRole();\n        await this.createDefaultInfoGroup();\n        await this.createSuperAdmin();\n    }\n\n    /**\n     * Load resources, permission annotations, and save them to the database\n     */\n    private async loadResourcesAndPermissions() {\n        const metadataMap: Map<string, { resource: Resource, permissions: Permission[] }> = new Map();\n        // Iterate Modules from module container\n        this.modulesContainer.forEach(module => {\n            for (const [key, value] of [...module.components, ...module.routes]) {\n                const isResolverOrController =\n                    Reflect.getMetadataKeys(value.instance.constructor)\n                        .filter(key => ['graphql:resolver_type', 'path']\n                            .includes(key)).length > 0;\n\n                if (isResolverOrController) {\n                    // Get the metadata in the @Resource() annotation on the Resolver or Controller class\n                    const resource: Resource = Reflect.getMetadata(RESOURCE_DEFINITION, value.instance.constructor);\n                    // Get the prototype object of the Resolver or Controller class\n                    const prototype = Object.getPrototypeOf(value.instance);\n                    if (prototype) {\n                        // Get the method name in the Resolver or Controller class,\n                        // the name in the callback function is the method name in the current class\n                        const permissions: Permission[] = this.metadataScanner.scanFromPrototype(value.instance, prototype, name => {\n                            // Get the metadata in the @Permission() annotation on the method in the Resolver or Controller class\n                            return Reflect.getMetadata(PERMISSION_DEFINITION, value.instance, name);\n                        });\n                        // If the metadata exists, it will be added to the resource collection,\n                        // and it will be automatically deduplicated according to resource.indetify\n                        if (resource) {\n                            // Translate the resources name\n                            resource.name = t(resource.name);\n                            // Translate the permissions name\n                            permissions.forEach(permission => {\n                                permission.name = t(permission.name);\n                            });\n                            metadataMap.set(resource.identify, { resource, permissions });\n                        }\n                    }\n                }\n            }\n        });\n\n        /**\n         * LOOK ME:\n         *\n         * The following are the create and delete logic for resources and permissions.\n         *\n         * When the permission uniquely identifies the change,\n         * the relationship between the changed permission and the corresponding role will also be deleted.\n         *\n         */\n\n        // All resource annotations and all permission annotations that were scanned\n        const scannedResourcesAndPermissions = [...metadataMap.values()].map(metadataValue => {\n            // Bind permissions to the corresponding resource\n            metadataValue.permissions.forEach(v => v.resource = metadataValue.resource);\n            return { permissions: metadataValue.permissions, resource: metadataValue.resource };\n        });\n\n        // All resource annotations that were scanned\n        const scannedResources = scannedResourcesAndPermissions.map(v => v.resource);\n\n        // Remove the resources and their permissions which were removed from the annotation\n        const resourceIdentifies = [...metadataMap.keys()].length === 0 ? ['__delete_all_resource__'] : [...metadataMap.keys()];\n        const notExistResources = await this.resourceRepo.find({ where: { identify: Not(In(resourceIdentifies)) } });\n        if (notExistResources.length > 0) await this.resourceRepo.delete(notExistResources.map(v => v.id));\n        // Filter out the new resources\n        const existResources = await this.resourceRepo.find({ order: { id: 'ASC' } });\n        const newResourcess = scannedResources.filter(sr => !existResources.map(v => v.identify).includes(sr.identify));\n        // Save the new resources\n        if (newResourcess.length > 0) await this.resourceRepo.save(this.resourceRepo.create(newResourcess));\n        // Update existing resources name\n        existResources.forEach(er => {\n            er.name = scannedResources.find(sr => sr.identify === er.identify).name;\n        });\n        await this.resourceRepo.save(existResources);\n\n        // All permission annotations that were scanned\n        const scannedPermissions = <Permission[]>[].concat(...scannedResourcesAndPermissions.map(v => v.permissions));\n        // Query the resources of all the permission annotations scanned\n        const resource = await this.resourceRepo.find({ where: { identify: In(scannedPermissions.map(v => v.resource.identify)) } });\n        // Bind resources to permissions\n        scannedPermissions.forEach(permission => {\n            permission.resource = resource.find(v => v.identify === permission.resource.identify);\n        });\n        // Remove the permissions that were removed from annotations\n        // tslint:disable-next-line:max-line-length\n        const permissionIdentifies = scannedPermissions.map(v => v.identify).length === 0 ? ['__delete_all_permission__'] : scannedPermissions.map(v => v.identify);\n        const notExistPermissions = await this.permissionRepo.find({ where: { identify: Not(In(permissionIdentifies)) } });\n        if (notExistPermissions.length > 0) await this.permissionRepo.delete(notExistPermissions.map(v => v.id));\n        // Filter out the new permissions\n        const existPermissions = await this.permissionRepo.find({ order: { id: 'ASC' } });\n        const newPermissions = scannedPermissions.filter(sp => !existPermissions.map(v => v.identify).includes(sp.identify));\n        // Save the new permissions\n        if (newPermissions.length > 0) await this.permissionRepo.save(this.permissionRepo.create(newPermissions));\n        // Update existing permissions name\n        existPermissions.forEach(ep => {\n            ep.name = scannedPermissions.find(sp => sp.identify === ep.identify).name;\n            ep.action = scannedPermissions.find(sp => sp.identify === ep.identify).action;\n        });\n        await this.permissionRepo.save(existPermissions);\n    }\n\n    /**\n     * Create a default ordinary user role\n     */\n    private async createDefaultRole() {\n        const defaultRole = await this.roleRepo.findOne(1);\n\n        if (defaultRole) return;\n\n        await this.roleRepo.save(this.roleRepo.create({\n            id: 1,\n            name: t('ordinary user')\n        }));\n    }\n\n    /**\n     * Create a default information group\n     */\n    private async createDefaultInfoGroup() {\n        const defaultInfoGroup = await this.infoGroupRepo.findOne(1);\n\n        if (defaultInfoGroup) return;\n\n        await this.infoGroupRepo.save(this.infoGroupRepo.create({\n            id: 1,\n            name: t('ordinary user information group'),\n            role: {\n                id: 1\n            }\n        }));\n    }\n\n    /**\n     * Create a system super administrator\n     */\n    private async createSuperAdmin() {\n        const sadmin = await this.userRepo.findOne({ where: { username: 'sadmin' } });\n        if (sadmin) return;\n        await this.userService.createUser({ username: 'sadmin', password: 'sadmin' });\n    }\n}"]}