{"version":3,"sources":["../src/utils/crypto.util.ts"],"names":[],"mappings":";;;;;;;;AAAA,2CAA4C;AAC5C,mCAAmC;AAMnC,IAAa,UAAU,GAAvB,MAAa,UAAU;IAOnB,KAAK,CAAC,eAAe,CAAC,QAAgB;QAClC,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACvD,CAAC;IAQD,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,YAAoB;QACtD,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAClD,CAAC;CACJ,CAAA;AApBY,UAAU;IADtB,mBAAU,EAAE;GACA,UAAU,CAoBtB;AApBY,gCAAU","file":"crypto.util.js","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\n\n/**\n * Crypto util\n */\n@Injectable()\nexport class CryptoUtil {\n\n    /**\n     * Encrypt the password\n     *\n     * @param password password\n     */\n    async encryptPassword(password: string): Promise<string> {\n        return bcrypt.hash(password, bcrypt.genSaltSync());\n    }\n\n    /**\n     * Check if the password is correct\n     *\n     * @param password password\n     * @param passwordHash password of hash\n     */\n    async checkPassword(password: string, passwordHash: string): Promise<boolean> {\n        return bcrypt.compare(password, passwordHash);\n    }\n}"]}