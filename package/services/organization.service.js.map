{"version":3,"sources":["../src/services/organization.service.ts"],"names":[],"mappings":"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","file":"organization.service.js","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository, TreeRepository } from 'typeorm';\n\nimport { Organization } from '../entities/organization.entity';\nimport { User } from '../entities/user.entity';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class OrganizationService {\n    constructor(\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService,\n        @InjectRepository(Organization) private readonly organizationReq: TreeRepository<Organization>,\n        @InjectRepository(User) private readonly userRep: Repository<User>\n    ) { }\n\n    /**\n     * Query root organizations\n     */\n    async findRoots(): Promise<Organization[]> {\n        return this.organizationReq.findRoots();\n    }\n\n    /**\n     * Query all organizations tree node\n     */\n    async findAllTrees(): Promise<Organization[]> {\n        return this.organizationReq.findTrees();\n    }\n\n    /**\n     * Query all suborganizations under the specified organization\n     *\n     * @param id The specified organizaiton id\n     */\n    async findChildren(id: number): Promise<Organization> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n        const children = await this.organizationReq.findDescendantsTree(exist);\n        return children;\n    }\n\n    /**\n     * Create a organization\n     *\n     * @param name The organization's name\n     * @param parentId The organization's parent id\n     */\n    async createOrganization(name: string, parentId: number): Promise<void> {\n        let parent: Organization | undefined;\n        if (parentId) {\n            parent = await this.organizationReq.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(t('The parent organization with id of %s does not exist', parentId.toString()), 404);\n            }\n        }\n\n        await this.entityCheckService.checkNameExist(Organization, name);\n\n        const organization: Organization = this.organizationReq.create({ name, parent });\n        try {\n            await this.organizationReq.save(organization);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Update organization\n     *\n     * @param id The specified organizaiton id\n     * @param name The organization's name\n     * @param parentId The organization's parent id\n     */\n    async updateOrganization(id: number, name: string, parentId: number): Promise<void> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        if (name !== exist.name) {\n            await this.entityCheckService.checkNameExist(Organization, name);\n        }\n\n        let parent: Organization | undefined;\n        if (parentId) {\n            parent = await this.organizationReq.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(t('The parent organization with id of %s does not exist', parentId.toString()), 404);\n            }\n        }\n        try {\n            exist.name = name;\n            exist.parent = parent as any;\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Delete organization\n     *\n     * @param id The specified organizaiton id\n     */\n    async deleteOrganization(id: number): Promise<void> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const children = await this.organizationReq.findDescendants(exist);\n        if (children) {\n            throw new HttpException('Cannot delete the organization that have child organizations', 406);\n        }\n        try {\n            await this.organizationReq.delete(id);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Add users to the organization\n     *\n     * @param id The specified organizaiton id\n     * @param userIds The specified users id to be add\n     */\n    async addUsersToOrganization(id: number, userIds: number[]): Promise<void> {\n        const exist = await this.organizationReq.findOne(id, { relations: ['users'] });\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const userArr = await this.userRep.findByIds(userIds);\n        userIds.forEach(userId => {\n            const find: User | undefined = userArr.find(user => {\n                return user.id === userId;\n            });\n            if (!find) {\n                throw new HttpException(t('The user id of %s does not exist', userId.toString()), 404);\n            }\n        });\n\n        exist.users.forEach(user => {\n            const find = userIds.find(id => {\n                return id === user.id;\n            });\n            if (find) {\n                throw new HttpException(t('User with id of %s is already under organization', user.id.toString()), 409);\n            }\n        });\n        exist.users.push(...userArr);\n        try {\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Delete users under the organization\n     *\n     * @param id The specified organizaiton id\n     * @param userIds The specified users id\n     */\n    async deleteUserFromOrganization(id: number, userIds: number[]): Promise<void> {\n        const exist = await this.organizationReq.findOne(id, { relations: ['users'] });\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const userArr = await this.userRep.findByIds(userIds);\n        userIds.forEach(userId => {\n            const find: User | undefined = userArr.find(user => {\n                return user.id === userId;\n            });\n            if (!find) {\n                throw new HttpException(t('The user id of %s does not exist', userId.toString()), 404);\n            }\n            const index = exist.users.findIndex(user => {\n                return user.id === userId;\n            });\n            if (index < 0) {\n                throw new HttpException(t('The user id of %s does not appear in this organization', userId.toString()), 404);\n            }\n            exist.users.splice(index, 1);\n        });\n        try {\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n}"]}