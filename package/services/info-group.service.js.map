{"version":3,"sources":["../src/services/info-group.service.ts"],"names":[],"mappings":"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","file":"info-group.service.js","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository } from 'typeorm';\n\nimport { InfoGroup } from '../entities/info-group.entity';\nimport { InfoItem } from '../entities/info-item.entity';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class InfoGroupService {\n    constructor(\n        @InjectRepository(InfoGroup) private readonly infoGroupRepo: Repository<InfoGroup>,\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService\n    ) { }\n\n    /**\n     * Create a information group\n     *\n     * @param name The name of information group\n     * @param roleId The roleId of information group\n     */\n    async create(name: string, roleId: number) {\n        await this.entityCheckService.checkNameExist(InfoGroup, name);\n        if (await this.infoGroupRepo.findOne({ role: { id: roleId } })) {\n            throw new HttpException(t('The role information group already exists'), 409);\n        }\n        await this.infoGroupRepo.save(this.infoGroupRepo.create({ name, role: { id: roleId } }));\n    }\n\n    /**\n     * Add some specified information items to the specified information group\n     *\n     * @param infoGroupId The specified information group's id\n     * @param infoItemIds The specified information item's id array\n     */\n    async addInfoItem(infoGroupId: number, infoItemIds: number[]) {\n        const infoItems = await this.infoGroupRepo\n            .createQueryBuilder('infoGroup')\n            .relation(InfoGroup, 'infoItems')\n            .of(infoGroupId)\n            .loadMany<InfoItem>();\n\n        const duplicateIds = infoItems.map(infoItem => infoItem.id).filter(infoItemId => infoItemIds.includes(infoItemId));\n        if (duplicateIds.length) throw new HttpException(t('Information item with id [%s] already exists', duplicateIds.toString()), 409);\n\n        await this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(infoGroupId).add(infoItemIds);\n    }\n\n    /**\n     * Delete the specified information group\n     *\n     * @param id The information group's id\n     */\n    async delete(id: number) {\n        await this.infoGroupRepo.delete(id);\n    }\n\n    /**\n     * Remove specified information items from the specified information group\n     *\n     * @param infoGroupId The specified information group's id\n     * @param infoItemIds The specified information item's id array\n     */\n    async deleteIntoItem(infoGroupId: number, infoItemIds: number[]) {\n        await this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(infoGroupId).remove(infoItemIds);\n    }\n\n    /**\n     * Update the specified information group\n     *\n     * @param id The specified information group's id\n     * @param name The name to be update\n     */\n    async update(id: number, name: string, roleId: number) {\n        await this.entityCheckService.checkNameExist(InfoGroup, name);\n        await this.infoGroupRepo.update(id, { name, role: { id: roleId } });\n    }\n\n    /**\n     * Query all groups\n     */\n    async findAll() {\n        return this.infoGroupRepo.find();\n    }\n\n    /**\n     * Query all information items under the current information group ID\n     *\n     * @param id The specified information group's id\n     */\n    async findItemsById(id: number) {\n        return this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(id).loadMany();\n    }\n}"]}