{"version":3,"sources":["../src/services/role.service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAErC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D,qBACa,WAAW;IAEY,OAAO,CAAC,QAAQ,CAAC,kBAAkB;IACvC,OAAO,CAAC,QAAQ,CAAC,QAAQ;IACnB,OAAO,CAAC,QAAQ,CAAC,cAAc;gBAFhB,kBAAkB,EAAE,kBAAkB,EAC1C,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,EACpB,cAAc,EAAE,UAAU,CAAC,UAAU,CAAC;IAQnF,UAAU,CAAC,IAAI,EAAE,MAAM;IAWvB,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAmBnC,UAAU,CAAC,EAAE,EAAE,MAAM;IAoBrB,cAAc,CAAC,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE;IAwBlD,SAAS;IAST,eAAe,CAAC,MAAM,EAAE,MAAM;IAqB9B,uBAAuB,CAAC,GAAG,EAAE,MAAM,EAAE;CA2B9C","file":"role.service.d.ts","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository } from 'typeorm';\n\nimport { InfoItem } from '../entities/info-item.entity';\nimport { Permission } from '../entities/permission.entity';\nimport { Role } from '../entities/role.entity';\nimport { RoleInfoData } from '../interfaces/role.interface';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class RoleService {\n    constructor(\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService,\n        @InjectRepository(Role) private readonly roleRepo: Repository<Role>,\n        @InjectRepository(Permission) private readonly permissionRepo: Repository<Permission>\n    ) { }\n\n    /**\n     * Create a role\n     *\n     * @param name The role's name\n     */\n    async createRole(name: string) {\n        await this.entityCheckService.checkNameExist(Role, name);\n        await this.roleRepo.save(this.roleRepo.create({ name }));\n    }\n\n    /**\n     * Update the specified role's name\n     *\n     * @param id The specified role's id\n     * @param name The name to be update\n     */\n    async updateRole(id: number, name: string) {\n        const role = await this.roleRepo.findOne(id);\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        if (name !== role.name) {\n            await this.entityCheckService.checkNameExist(Role, name);\n        }\n\n        role.name = name;\n        await this.roleRepo.save(role);\n    }\n\n    /**\n     * Delete role\n     *\n     * @param id The specified role's id\n     */\n    async deleteRole(id: number) {\n        const role = await this.roleRepo.findOne(id, { relations: ['permissions'] });\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        try {\n            this.roleRepo.createQueryBuilder('role').relation(Role, 'permissions').of(role).remove(role.permissions);\n            await this.roleRepo.remove(role);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Set permissions for a role\n     *\n     * @param id The specified role's id\n     * @param permissionIds The specified permission's id to be set\n     */\n    async setPermissions(id: number, permissionIds: number[]) {\n        const role = await this.roleRepo.findOne(id);\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        const permissionArr = await this.permissionRepo.findByIds(permissionIds);\n        permissionIds.forEach(permissionId => {\n            const exist: Permission | undefined = permissionArr.find(permission => {\n                return permission.id === permissionId;\n            });\n\n            if (!exist) {\n                throw new HttpException(t('The permission id of %s does not exist', permissionId.toString()), 404);\n            }\n        });\n\n        role.permissions = permissionArr;\n        await this.roleRepo.save(role);\n    }\n\n    /**\n     * Query all roles\n     */\n    async findRoles() {\n        return this.roleRepo.find();\n    }\n\n    /**\n     * Query all associated information for a specified role\n     *\n     * @param roleId The specified role's id\n     */\n    async findOneRoleInfo(roleId: number) {\n        const role = await this.roleRepo.findOne(roleId, { relations: ['permissions'] });\n\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', roleId.toString()), 404);\n        }\n\n        const roleInfoData: RoleInfoData = {\n            id: role.id,\n            name: role.name,\n            permissions: (role.permissions && role.permissions.length > 0) ? role.permissions : [],\n            infoItems: await this.findInfoGroupItemsByIds([roleId])\n        };\n        return roleInfoData;\n    }\n\n    /**\n     * Query all information items under the information group to which the role belongs\n     *\n     * @param ids Role ID array\n     */\n    async findInfoGroupItemsByIds(ids: number[]) {\n        let infoItemsArr: InfoItem[] = [];\n        const roles = await this.roleRepo.createQueryBuilder('role')\n            .leftJoinAndSelect('infoGroup', 'infoGroup')\n            .leftJoinAndSelect('infoGroup.infoItems', 'infoItems')\n            .whereInIds(ids)\n            .orderBy('infoItems.order', 'ASC')\n            .getMany();\n\n        if (!roles || roles.length === 0) {\n            return infoItemsArr;\n        }\n\n        roles.forEach(role => {\n            if (role.infoGroup && role.infoGroup.infoItems && role.infoGroup.infoItems.length > 0) {\n                role.infoGroup.infoItems.forEach(infoItem => infoItemsArr.push(infoItem));\n            }\n        });\n\n        const temp = {};\n        infoItemsArr = infoItemsArr.reduce((item, next) => {\n            temp[next.name] ? '' : temp[next.name] = item.push(next);\n            return item;\n        }, []);\n\n        return infoItemsArr;\n    }\n}"]}