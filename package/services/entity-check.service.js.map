{"version":3,"sources":["../src/services/entity-check.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAA2D;AAC3D,6CAAsD;AACtD,+BAA+B;AAC/B,qCAAwC;AAGxC,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC3B,YACmC,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAC3D,CAAC;IAEL,KAAK,CAAC,cAAc,CAAC,WAAgB,EAAE,IAAY;QAC/C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QACtE,IAAI,KAAK,EAAE;YACP,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,qBAAqB,CAAC,EAAE,GAAG,CAAC,CAAC;SAC1D;IACL,CAAC;CACJ,CAAA;AAXY,kBAAkB;IAD9B,mBAAU,EAAE;IAGJ,WAAA,6BAAmB,EAAE,CAAA;qCAAwB,uBAAa;GAFtD,kBAAkB,CAW9B;AAXY,gDAAkB","file":"entity-check.service.js","sourcesContent":["import { HttpException, Injectable } from '@nestjs/common';\nimport { InjectEntityManager } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { EntityManager } from 'typeorm';\n\n@Injectable()\nexport class EntityCheckService {\n    constructor(\n        @InjectEntityManager() private entityManager: EntityManager\n    ) { }\n\n    async checkNameExist(entityClass: any, name: string) {\n        const exist = await this.entityManager.findOne(entityClass, { name });\n        if (exist) {\n            throw new HttpException(t('Name already exists'), 409);\n        }\n    }\n}"]}