{"version":3,"sources":["../src/services/role.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,6CAAmD;AACnD,+BAA+B;AAC/B,qCAAqC;AAGrC,qEAA2D;AAC3D,yDAA+C;AAE/C,iEAA4D;AAG5D,IAAa,WAAW,GAAxB,MAAa,WAAW;IACpB,YACiD,kBAAsC,EAC1C,QAA0B,EACpB,cAAsC;QAFxC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAC1C,aAAQ,GAAR,QAAQ,CAAkB;QACpB,mBAAc,GAAd,cAAc,CAAwB;IACrF,CAAC;IAOL,KAAK,CAAC,UAAU,CAAC,IAAY;QACzB,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,kBAAI,EAAE,IAAI,CAAC,CAAC;QACzD,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;IAQD,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,IAAY;QACrC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,kCAAkC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SACtF;QAED,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;YACpB,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,kBAAI,EAAE,IAAI,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAOD,KAAK,CAAC,UAAU,CAAC,EAAU;QACvB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,kCAAkC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SACtF;QAED,IAAI;YACA,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,kBAAI,EAAE,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACpC;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,mBAAmB,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SACxE;IACL,CAAC;IAQD,KAAK,CAAC,cAAc,CAAC,EAAU,EAAE,aAAuB;QACpD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,kCAAkC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SACtF;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACzE,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YACjC,MAAM,KAAK,GAA2B,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAClE,OAAO,UAAU,CAAC,EAAE,KAAK,YAAY,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,EAAE;gBACR,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,wCAAwC,EAAE,YAAY,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;aACtG;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;QACjC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAKD,KAAK,CAAC,SAAS;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAOD,KAAK,CAAC,eAAe,CAAC,MAAc;QAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAEjF,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,sBAAa,CAAC,SAAC,CAAC,kCAAkC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;SAC1F;QAED,MAAM,YAAY,GAAiB;YAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;YACtF,SAAS,EAAE,MAAM,IAAI,CAAC,uBAAuB,CAAC,CAAC,MAAM,CAAC,CAAC;SAC1D,CAAC;QACF,OAAO,YAAY,CAAC;IACxB,CAAC;IAOD,KAAK,CAAC,uBAAuB,CAAC,GAAa;QACvC,IAAI,YAAY,GAAe,EAAE,CAAC;QAClC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC;aACvD,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC;aAC3C,iBAAiB,CAAC,qBAAqB,EAAE,WAAW,CAAC;aACrD,UAAU,CAAC,GAAG,CAAC;aACf,OAAO,CAAC,iBAAiB,EAAE,KAAK,CAAC;aACjC,OAAO,EAAE,CAAC;QAEf,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,YAAY,CAAC;SACvB;QAED,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACjB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnF,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC7E;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,YAAY,CAAC;IACxB,CAAC;CACJ,CAAA;AA/IY,WAAW;IADvB,mBAAU,EAAE;IAGJ,WAAA,eAAM,CAAC,yCAAkB,CAAC,CAAA;IAC1B,WAAA,0BAAgB,CAAC,kBAAI,CAAC,CAAA;IACtB,WAAA,0BAAgB,CAAC,8BAAU,CAAC,CAAA;qCAFoC,yCAAkB;QAChC,oBAAU;QACE,oBAAU;GAJpE,WAAW,CA+IvB;AA/IY,kCAAW","file":"role.service.js","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository } from 'typeorm';\n\nimport { InfoItem } from '../entities/info-item.entity';\nimport { Permission } from '../entities/permission.entity';\nimport { Role } from '../entities/role.entity';\nimport { RoleInfoData } from '../interfaces/role.interface';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class RoleService {\n    constructor(\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService,\n        @InjectRepository(Role) private readonly roleRepo: Repository<Role>,\n        @InjectRepository(Permission) private readonly permissionRepo: Repository<Permission>\n    ) { }\n\n    /**\n     * Create a role\n     *\n     * @param name The role's name\n     */\n    async createRole(name: string) {\n        await this.entityCheckService.checkNameExist(Role, name);\n        await this.roleRepo.save(this.roleRepo.create({ name }));\n    }\n\n    /**\n     * Update the specified role's name\n     *\n     * @param id The specified role's id\n     * @param name The name to be update\n     */\n    async updateRole(id: number, name: string) {\n        const role = await this.roleRepo.findOne(id);\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        if (name !== role.name) {\n            await this.entityCheckService.checkNameExist(Role, name);\n        }\n\n        role.name = name;\n        await this.roleRepo.save(role);\n    }\n\n    /**\n     * Delete role\n     *\n     * @param id The specified role's id\n     */\n    async deleteRole(id: number) {\n        const role = await this.roleRepo.findOne(id, { relations: ['permissions'] });\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        try {\n            this.roleRepo.createQueryBuilder('role').relation(Role, 'permissions').of(role).remove(role.permissions);\n            await this.roleRepo.remove(role);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Set permissions for a role\n     *\n     * @param id The specified role's id\n     * @param permissionIds The specified permission's id to be set\n     */\n    async setPermissions(id: number, permissionIds: number[]) {\n        const role = await this.roleRepo.findOne(id);\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', id.toString()), 404);\n        }\n\n        const permissionArr = await this.permissionRepo.findByIds(permissionIds);\n        permissionIds.forEach(permissionId => {\n            const exist: Permission | undefined = permissionArr.find(permission => {\n                return permission.id === permissionId;\n            });\n\n            if (!exist) {\n                throw new HttpException(t('The permission id of %s does not exist', permissionId.toString()), 404);\n            }\n        });\n\n        role.permissions = permissionArr;\n        await this.roleRepo.save(role);\n    }\n\n    /**\n     * Query all roles\n     */\n    async findRoles() {\n        return this.roleRepo.find();\n    }\n\n    /**\n     * Query all associated information for a specified role\n     *\n     * @param roleId The specified role's id\n     */\n    async findOneRoleInfo(roleId: number) {\n        const role = await this.roleRepo.findOne(roleId, { relations: ['permissions'] });\n\n        if (!role) {\n            throw new HttpException(t('The role id of %s does not exist', roleId.toString()), 404);\n        }\n\n        const roleInfoData: RoleInfoData = {\n            id: role.id,\n            name: role.name,\n            permissions: (role.permissions && role.permissions.length > 0) ? role.permissions : [],\n            infoItems: await this.findInfoGroupItemsByIds([roleId])\n        };\n        return roleInfoData;\n    }\n\n    /**\n     * Query all information items under the information group to which the role belongs\n     *\n     * @param ids Role ID array\n     */\n    async findInfoGroupItemsByIds(ids: number[]) {\n        let infoItemsArr: InfoItem[] = [];\n        const roles = await this.roleRepo.createQueryBuilder('role')\n            .leftJoinAndSelect('infoGroup', 'infoGroup')\n            .leftJoinAndSelect('infoGroup.infoItems', 'infoItems')\n            .whereInIds(ids)\n            .orderBy('infoItems.order', 'ASC')\n            .getMany();\n\n        if (!roles || roles.length === 0) {\n            return infoItemsArr;\n        }\n\n        roles.forEach(role => {\n            if (role.infoGroup && role.infoGroup.infoItems && role.infoGroup.infoItems.length > 0) {\n                role.infoGroup.infoItems.forEach(infoItem => infoItemsArr.push(infoItem));\n            }\n        });\n\n        const temp = {};\n        infoItemsArr = infoItemsArr.reduce((item, next) => {\n            temp[next.name] ? '' : temp[next.name] = item.push(next);\n            return item;\n        }, []);\n\n        return infoItemsArr;\n    }\n}"]}