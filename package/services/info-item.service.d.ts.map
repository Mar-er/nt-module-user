{"version":3,"sources":["../src/services/info-item.service.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAErC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D,qBACa,eAAe;IAEQ,OAAO,CAAC,QAAQ,CAAC,YAAY;IAC7B,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBADlB,YAAY,EAAE,UAAU,CAAC,QAAQ,CAAC,EAClC,kBAAkB,EAAE,kBAAkB;IAQjF,MAAM,CAAC,QAAQ,EAAE,QAAQ;IAUzB,MAAM,CAAC,EAAE,EAAE,MAAM;IAcjB,MAAM,CAAC,mBAAmB,EAAE,mBAAmB;IAyB/C,OAAO;CAGhB","file":"info-item.service.d.ts","sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { InfoItem } from '../entities/info-item.entity';\nimport { UpdateInfoItemInput } from '../interfaces/info-item.interface';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class InfoItemService {\n    constructor(\n        @InjectRepository(InfoItem) private readonly infoItemRepo: Repository<InfoItem>,\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService\n    ) { }\n\n    /**\n     * Create an item of information\n     *\n     * @param infoItem The information item object\n     */\n    async create(infoItem: InfoItem) {\n        await this.entityCheckService.checkNameExist(InfoItem, infoItem.name);\n        this.infoItemRepo.save(this.infoItemRepo.create(infoItem));\n    }\n\n    /**\n     * Delete information item\n     *\n     * @param id The information item's id\n     */\n    async delete(id: number) {\n        const infoItem = await this.infoItemRepo.findOne(id, { relations: ['userInfos', 'infoGroups'] });\n        this.infoItemRepo.createQueryBuilder('infoItem').relation(InfoItem, 'infoGroups').of(id).remove(infoItem.infoGroups);\n        this.infoItemRepo.remove(infoItem);\n    }\n\n    /**\n     * Update the specified information\n     *\n     * @param id The information item's id\n     * @param name The information item's name\n     * @param description The information item's description\n     * @param type The information item's type\n     */\n    async update(updateInfoItemInput: UpdateInfoItemInput) {\n        await this.entityCheckService.checkNameExist(InfoItem, updateInfoItemInput.name);\n        if (updateInfoItemInput.order) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { order: updateInfoItemInput.order });\n        }\n        if (updateInfoItemInput.type) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { type: updateInfoItemInput.type });\n        }\n        if (updateInfoItemInput.name) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { name: updateInfoItemInput.name });\n        }\n        if (updateInfoItemInput.description) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { description: updateInfoItemInput.description });\n        }\n        if (updateInfoItemInput.registerDisplay) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { registerDisplay: updateInfoItemInput.registerDisplay });\n        }\n        if (updateInfoItemInput.informationDisplay) {\n            this.infoItemRepo.update(updateInfoItemInput.id, { informationDisplay: updateInfoItemInput.informationDisplay });\n        }\n    }\n\n    /**\n     * Query all information items\n     */\n    async findAll() {\n        return this.infoItemRepo.find({ order: { order: 'ASC' } });\n    }\n}"]}