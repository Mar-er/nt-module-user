{"version":3,"sources":["../src/services/info-group.service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAErC,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAE1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D,qBACa,gBAAgB;IAEQ,OAAO,CAAC,QAAQ,CAAC,aAAa;IAC/B,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBADjB,aAAa,EAAE,UAAU,CAAC,SAAS,CAAC,EACrC,kBAAkB,EAAE,kBAAkB;IASjF,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAcnC,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE;IAkBtD,MAAM,CAAC,EAAE,EAAE,MAAM;IAUjB,cAAc,CAAC,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE;IAUzD,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAQ/C,OAAO;IASP,aAAa,CAAC,EAAE,EAAE,MAAM;CAGjC","file":"info-group.service.d.ts","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository } from 'typeorm';\n\nimport { InfoGroup } from '../entities/info-group.entity';\nimport { InfoItem } from '../entities/info-item.entity';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class InfoGroupService {\n    constructor(\n        @InjectRepository(InfoGroup) private readonly infoGroupRepo: Repository<InfoGroup>,\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService\n    ) { }\n\n    /**\n     * Create a information group\n     *\n     * @param name The name of information group\n     * @param roleId The roleId of information group\n     */\n    async create(name: string, roleId: number) {\n        await this.entityCheckService.checkNameExist(InfoGroup, name);\n        if (await this.infoGroupRepo.findOne({ role: { id: roleId } })) {\n            throw new HttpException(t('The role information group already exists'), 409);\n        }\n        this.infoGroupRepo.save(this.infoGroupRepo.create({ name, role: { id: roleId } }));\n    }\n\n    /**\n     * Add some specified information items to the specified information group\n     *\n     * @param infoGroupId The specified information group's id\n     * @param infoItemIds The specified information item's id array\n     */\n    async addInfoItem(infoGroupId: number, infoItemIds: number[]) {\n        const infoItems = await this.infoGroupRepo\n            .createQueryBuilder('infoGroup')\n            .relation(InfoGroup, 'infoItems')\n            .of(infoGroupId)\n            .loadMany<InfoItem>();\n\n        const duplicateIds = infoItems.map(infoItem => infoItem.id).filter(infoItemId => infoItemIds.includes(infoItemId));\n        if (duplicateIds.length) throw new HttpException(t('Information item with id [%s] already exists', duplicateIds.toString()), 409);\n\n        this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(infoGroupId).add(infoItemIds);\n    }\n\n    /**\n     * Delete the specified information group\n     *\n     * @param id The information group's id\n     */\n    async delete(id: number) {\n        this.infoGroupRepo.delete(id);\n    }\n\n    /**\n     * Remove specified information items from the specified information group\n     *\n     * @param infoGroupId The specified information group's id\n     * @param infoItemIds The specified information item's id array\n     */\n    async deleteIntoItem(infoGroupId: number, infoItemIds: number[]) {\n        this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(infoGroupId).remove(infoItemIds);\n    }\n\n    /**\n     * Update the specified information group\n     *\n     * @param id The specified information group's id\n     * @param name The name to be update\n     */\n    async update(id: number, name: string, roleId: number) {\n        await this.entityCheckService.checkNameExist(InfoGroup, name);\n        this.infoGroupRepo.update(id, { name, role: { id: roleId } });\n    }\n\n    /**\n     * Query all groups\n     */\n    async findAll() {\n        return this.infoGroupRepo.find();\n    }\n\n    /**\n     * Query all information items under the current information group ID\n     *\n     * @param id The specified information group's id\n     */\n    async findItemsById(id: number) {\n        return this.infoGroupRepo.createQueryBuilder('infoGroup').relation(InfoGroup, 'infoItems').of(id).loadMany();\n    }\n}"]}