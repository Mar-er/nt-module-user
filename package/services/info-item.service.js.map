{"version":3,"sources":["../src/services/info-item.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,6CAAmD;AACnD,qCAAqC;AAErC,mEAAwD;AAExD,iEAA4D;AAG5D,IAAa,eAAe,GAA5B,MAAa,eAAe;IACxB,YACiD,YAAkC,EAClC,kBAAsC;QADtC,iBAAY,GAAZ,YAAY,CAAsB;QAClC,uBAAkB,GAAlB,kBAAkB,CAAoB;IACnF,CAAC;IAOL,KAAK,CAAC,MAAM,CAAC,QAAkB;QAC3B,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,2BAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtE,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAOD,KAAK,CAAC,MAAM,CAAC,EAAU;QACnB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;QACjG,MAAM,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,2BAAQ,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC3H,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAUD,KAAK,CAAC,MAAM,CAAC,mBAAwC;QACjD,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,2BAAQ,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjF,IAAI,mBAAmB,CAAC,KAAK,EAAE;YAC3B,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,mBAAmB,CAAC,KAAK,EAAE,CAAC,CAAC;SAChG;QACD,IAAI,mBAAmB,CAAC,IAAI,EAAE;YAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAC;SAC9F;QACD,IAAI,mBAAmB,CAAC,IAAI,EAAE;YAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAC;SAC9F;QACD,IAAI,mBAAmB,CAAC,WAAW,EAAE;YACjC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,mBAAmB,CAAC,WAAW,EAAE,CAAC,CAAC;SAC5G;QACD,IAAI,mBAAmB,CAAC,eAAe,EAAE;YACrC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,eAAe,EAAE,mBAAmB,CAAC,eAAe,EAAE,CAAC,CAAC;SACpH;QACD,IAAI,mBAAmB,CAAC,kBAAkB,EAAE;YACxC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,kBAAkB,EAAE,CAAC,CAAC;SAC1H;IACL,CAAC;IAKD,KAAK,CAAC,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC;CACJ,CAAA;AA/DY,eAAe;IAD3B,mBAAU,EAAE;IAGJ,WAAA,0BAAgB,CAAC,2BAAQ,CAAC,CAAA;IAC1B,WAAA,eAAM,CAAC,yCAAkB,CAAC,CAAA;qCADgC,oBAAU;QACJ,yCAAkB;GAH9E,eAAe,CA+D3B;AA/DY,0CAAe","file":"info-item.service.js","sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { InfoItem } from '../entities/info-item.entity';\nimport { UpdateInfoItemInput } from '../interfaces/info-item.interface';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class InfoItemService {\n    constructor(\n        @InjectRepository(InfoItem) private readonly infoItemRepo: Repository<InfoItem>,\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService\n    ) { }\n\n    /**\n     * Create an item of information\n     *\n     * @param infoItem The information item object\n     */\n    async create(infoItem: InfoItem) {\n        await this.entityCheckService.checkNameExist(InfoItem, infoItem.name);\n        await this.infoItemRepo.save(this.infoItemRepo.create(infoItem));\n    }\n\n    /**\n     * Delete information item\n     *\n     * @param id The information item's id\n     */\n    async delete(id: number) {\n        const infoItem = await this.infoItemRepo.findOne(id, { relations: ['userInfos', 'infoGroups'] });\n        await this.infoItemRepo.createQueryBuilder('infoItem').relation(InfoItem, 'infoGroups').of(id).remove(infoItem.infoGroups);\n        await this.infoItemRepo.remove(infoItem);\n    }\n\n    /**\n     * Update the specified information\n     *\n     * @param id The information item's id\n     * @param name The information item's name\n     * @param description The information item's description\n     * @param type The information item's type\n     */\n    async update(updateInfoItemInput: UpdateInfoItemInput) {\n        await this.entityCheckService.checkNameExist(InfoItem, updateInfoItemInput.name);\n        if (updateInfoItemInput.order) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { order: updateInfoItemInput.order });\n        }\n        if (updateInfoItemInput.type) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { type: updateInfoItemInput.type });\n        }\n        if (updateInfoItemInput.name) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { name: updateInfoItemInput.name });\n        }\n        if (updateInfoItemInput.description) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { description: updateInfoItemInput.description });\n        }\n        if (updateInfoItemInput.registerDisplay) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { registerDisplay: updateInfoItemInput.registerDisplay });\n        }\n        if (updateInfoItemInput.informationDisplay) {\n            await this.infoItemRepo.update(updateInfoItemInput.id, { informationDisplay: updateInfoItemInput.informationDisplay });\n        }\n    }\n\n    /**\n     * Query all information items\n     */\n    async findAll() {\n        return this.infoItemRepo.find({ order: { order: 'ASC' } });\n    }\n}"]}