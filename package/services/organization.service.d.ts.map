{"version":3,"sources":["../src/services/organization.service.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAErD,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D,qBACa,mBAAmB;IAEI,OAAO,CAAC,QAAQ,CAAC,kBAAkB;IAC/B,OAAO,CAAC,QAAQ,CAAC,eAAe;IACxC,OAAO,CAAC,QAAQ,CAAC,OAAO;gBAFH,kBAAkB,EAAE,kBAAkB,EAClC,eAAe,EAAE,cAAc,CAAC,YAAY,CAAC,EACrD,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC;IAMhE,SAAS,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;IAOpC,YAAY,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;IASvC,YAAY,CAAC,EAAE,EAAE,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IAc/C,kBAAkB,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IA0BjE,kBAAkB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IA+B7E,kBAAkB,CAAC,EAAE,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAuB7C,sBAAsB,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAsCpE,0BAA0B,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;CA4BjF","file":"organization.service.d.ts","sourcesContent":["import { HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { __ as t } from 'i18n';\nimport { Repository, TreeRepository } from 'typeorm';\n\nimport { Organization } from '../entities/organization.entity';\nimport { User } from '../entities/user.entity';\nimport { EntityCheckService } from './entity-check.service';\n\n@Injectable()\nexport class OrganizationService {\n    constructor(\n        @Inject(EntityCheckService) private readonly entityCheckService: EntityCheckService,\n        @InjectRepository(Organization) private readonly organizationReq: TreeRepository<Organization>,\n        @InjectRepository(User) private readonly userRep: Repository<User>\n    ) { }\n\n    /**\n     * Query root organizations\n     */\n    async findRoots(): Promise<Organization[]> {\n        return this.organizationReq.findRoots();\n    }\n\n    /**\n     * Query all organizations tree node\n     */\n    async findAllTrees(): Promise<Organization[]> {\n        return this.organizationReq.findTrees();\n    }\n\n    /**\n     * Query all suborganizations under the specified organization\n     *\n     * @param id The specified organizaiton id\n     */\n    async findChildren(id: number): Promise<Organization> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n        return this.organizationReq.findDescendantsTree(exist);\n    }\n\n    /**\n     * Create a organization\n     *\n     * @param name The organization's name\n     * @param parentId The organization's parent id\n     */\n    async createOrganization(name: string, parentId: number): Promise<void> {\n        let parent: Organization | undefined;\n        if (parentId) {\n            parent = await this.organizationReq.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(t('The parent organization with id of %s does not exist', parentId.toString()), 404);\n            }\n        }\n\n        await this.entityCheckService.checkNameExist(Organization, name);\n\n        const organization: Organization = this.organizationReq.create({ name, parent });\n        try {\n            await this.organizationReq.save(organization);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Update organization\n     *\n     * @param id The specified organizaiton id\n     * @param name The organization's name\n     * @param parentId The organization's parent id\n     */\n    async updateOrganization(id: number, name: string, parentId: number): Promise<void> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        if (name !== exist.name) {\n            await this.entityCheckService.checkNameExist(Organization, name);\n        }\n\n        let parent: Organization | undefined;\n        if (parentId) {\n            parent = await this.organizationReq.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(t('The parent organization with id of %s does not exist', parentId.toString()), 404);\n            }\n        }\n        try {\n            exist.name = name;\n            exist.parent = parent as any;\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Delete organization\n     *\n     * @param id The specified organizaiton id\n     */\n    async deleteOrganization(id: number): Promise<void> {\n        const exist = await this.organizationReq.findOne(id);\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const children = await this.organizationReq.findDescendants(exist);\n        if (children) {\n            throw new HttpException('Cannot delete the organization that have child organizations', 406);\n        }\n        try {\n            await this.organizationReq.delete(id);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Add users to the organization\n     *\n     * @param id The specified organizaiton id\n     * @param userIds The specified users id to be add\n     */\n    async addUsersToOrganization(id: number, userIds: number[]): Promise<void> {\n        const exist = await this.organizationReq.findOne(id, { relations: ['users'] });\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const userArr = await this.userRep.findByIds(userIds);\n        userIds.forEach(userId => {\n            const find: User | undefined = userArr.find(user => {\n                return user.id === userId;\n            });\n            if (!find) {\n                throw new HttpException(t('The user id of %s does not exist', userId.toString()), 404);\n            }\n        });\n\n        exist.users.forEach(user => {\n            const find = userIds.find(id => {\n                return id === user.id;\n            });\n            if (find) {\n                throw new HttpException(t('User with id of %s is already under organization', user.id.toString()), 409);\n            }\n        });\n        exist.users.push(...userArr);\n        try {\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n\n    /**\n     * Delete users under the organization\n     *\n     * @param id The specified organizaiton id\n     * @param userIds The specified users id\n     */\n    async deleteUserFromOrganization(id: number, userIds: number[]): Promise<void> {\n        const exist = await this.organizationReq.findOne(id, { relations: ['users'] });\n        if (!exist) {\n            throw new HttpException(t('The organization with id of %s does not exist', id.toString()), 404);\n        }\n\n        const userArr = await this.userRep.findByIds(userIds);\n        userIds.forEach(userId => {\n            const find: User | undefined = userArr.find(user => {\n                return user.id === userId;\n            });\n            if (!find) {\n                throw new HttpException(t('The user id of %s does not exist', userId.toString()), 404);\n            }\n            const index = exist.users.findIndex(user => {\n                return user.id === userId;\n            });\n            if (index < 0) {\n                throw new HttpException(t('The user id of %s does not appear in this organization', userId.toString()), 404);\n            }\n            exist.users.splice(index, 1);\n        });\n        try {\n            await this.organizationReq.save(exist);\n        } catch (err) {\n            throw new HttpException(t('Database error %s', err.toString()), 500);\n        }\n    }\n}"]}