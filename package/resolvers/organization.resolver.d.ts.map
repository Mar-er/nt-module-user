{"version":3,"sources":["../src/resolvers/organization.resolver.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAEzE,qBAEa,oBAAoB;IAEzB,OAAO,CAAC,QAAQ,CAAC,mBAAmB;gBAAnB,mBAAmB,EAAE,mBAAmB;IAKvD,qBAAqB,IAAI,OAAO,CAAC,YAAY,CAAC;IAO9C,oBAAoB,IAAI,OAAO,CAAC,YAAY,CAAC;IAO7C,yBAAyB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO3E,kBAAkB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,IAAI,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOxF,kBAAkB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOpG,kBAAkB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOpE,sBAAsB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,OAAO,EAAE,MAAM,EAAE,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO3F,0BAA0B,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,OAAO,EAAE,MAAM,EAAE,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;CAIxG","file":"organization.resolver.d.ts","sourcesContent":["import { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { OrganizationService } from './../services/organization.service';\n\n@Resolver()\n@Resource({ name: 'organization_manage', identify: 'organization:manage' })\nexport class OrganizationResolver {\n    constructor(\n        private readonly organizationService: OrganizationService\n    ) { }\n\n    @Query('findRootOrganizations')\n    @Permission({ name: 'find_root_organizations', identify: 'organization:findRootOrganizations', action: 'find' })\n    async findRootOrganizations(): Promise<CommonResult> {\n        const data = await this.organizationService.findRoots();\n        return { code: 200, message: t('Get the root organization successfully'), data };\n    }\n\n    @Query('findAllOrganizations')\n    @Permission({ name: 'find_all_organizations', identify: 'organization:findAllOrganizations', action: 'find' })\n    async findAllOrganizations(): Promise<CommonResult> {\n        const data = await this.organizationService.findAllTrees();\n        return { code: 200, message: t('Get all organizations successful'), data };\n    }\n\n    @Query('findChildrenOrganizations')\n    @Permission({ name: 'find_children_organizations', identify: 'organization:findChildrenOrganizations', action: 'find' })\n    async findChildrenOrganizations(req, body: { id: number }): Promise<CommonResult> {\n        const data = await this.organizationService.findChildren(body.id);\n        return { code: 200, message: t('Get all sub-organizations below the organization successfully'), data };\n    }\n\n    @Mutation('createOrganization')\n    @Permission({ name: 'create_organization', identify: 'organization:createOrganization', action: 'create' })\n    async createOrganization(req, body: { name: string, parentId: number }): Promise<CommonResult> {\n        await this.organizationService.createOrganization(body.name, body.parentId);\n        return { code: 200, message: t('Create an organizational successfully') };\n    }\n\n    @Mutation('updateOrganization')\n    @Permission({ name: 'update_organization', identify: 'organization:updateOrganization', action: 'update' })\n    async updateOrganization(req, body: { id: number, name: string, parentId: number }): Promise<CommonResult> {\n        await this.organizationService.updateOrganization(body.id, body.name, body.parentId);\n        return { code: 200, message: t('Update organization successfully') };\n    }\n\n    @Mutation('deleteOrganization')\n    @Permission({ name: 'delete_organization', identify: 'organization:deleteOrganization', action: 'delete' })\n    async deleteOrganization(req, body: { id: number }): Promise<CommonResult> {\n        await this.organizationService.deleteOrganization(body.id);\n        return { code: 200, message: t('Delete organization successfully\"') };\n    }\n\n    @Mutation('addUsersToOrganization')\n    @Permission({ name: 'add_users_to_organization', identify: 'organization:addUsersToOrganization', action: 'create' })\n    async addUsersToOrganization(req, body: { id: number, userIds: number[] }): Promise<CommonResult> {\n        await this.organizationService.addUsersToOrganization(body.id, body.userIds);\n        return { code: 200, message: t('Add users to your organization successfully') };\n    }\n\n    @Mutation('deleteUserFromOrganization')\n    @Permission({ name: 'delete_user_from_organization', identify: 'organization:deleteUserFromOrganization', action: 'delete' })\n    async deleteUserFromOrganization(req, body: { id: number, userIds: number[] }): Promise<CommonResult> {\n        await this.organizationService.deleteUserFromOrganization(body.id, body.userIds);\n        return { code: 200, message: t('Delete users from your organization successfully') };\n    }\n}"]}