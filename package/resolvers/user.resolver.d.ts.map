{"version":3,"sources":["../src/resolvers/user.resolver.ts"],"names":[],"mappings":"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","file":"user.resolver.d.ts","sourcesContent":["import { HttpException, Inject } from '@nestjs/common';\nimport { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { CreateUserInput, UpdateUserInput, UserInfoData } from '../interfaces/user.interface';\nimport { UserService } from '../services/user.service';\n\n@Resolver()\n@Resource({ name: 'user_manage', identify: 'user:manage' })\nexport class UserResolver {\n    constructor(\n        @Inject(UserService) private readonly userService: UserService\n    ) { }\n\n    @Query('login')\n    async login(req, body: { username: string, password: string }): Promise<CommonResult> {\n        const data = await this.userService.login(body.username, body.password);\n        return { code: 200, message: t('Login success'), data: data.tokenInfo };\n    }\n\n    @Query('adminLogin')\n    async adminLogin(req, body: { username: string, password: string }): Promise<CommonResult> {\n        const data = await this.userService.login(body.username, body.password);\n        const userInfoData = data.userInfoData;\n        if (userInfoData.username !== 'sadmin' && userInfoData.userRoles.map(v => v.id).includes(1)) {\n            throw new HttpException(t('You are not authorized to access'), 401);\n        }\n        return { code: 200, message: t('Login success'), data: data.tokenInfo };\n    }\n\n    @Mutation('register')\n    async register(req, body: { registerUserInput: CreateUserInput }): Promise<CommonResult> {\n        await this.userService.register(body.registerUserInput);\n        return { code: 200, message: t('Registration success') };\n    }\n\n    @Mutation('createUser')\n    @Permission({ name: 'create_user', identify: 'user:createUser', action: 'create' })\n    async createUser(req, body: { createUserInput: CreateUserInput }): Promise<CommonResult> {\n        await this.userService.createUser(body.createUserInput);\n        return { code: 200, message: t('Create user successfully') };\n    }\n\n    @Mutation('addUserRole')\n    @Permission({ name: 'add_user_role', identify: 'user:addUserRole', action: 'create' })\n    async addUserRole(req, body: { userId: number, roleId: number }): Promise<CommonResult> {\n        await this.userService.addUserRole(body.userId, body.roleId);\n        return { code: 200, message: t('Add user role successfully') };\n    }\n\n    @Mutation('deleteUserRole')\n    @Permission({ name: 'delete_user_role', identify: 'user:deleteUserRole', action: 'delete' })\n    async deleteUserRole(req, body: { userId: number, roleId: number }): Promise<CommonResult> {\n        await this.userService.deleteUserRole(body.userId, body.roleId);\n        return { code: 200, message: t('Delete user role successfully') };\n    }\n\n    @Mutation('banUser')\n    @Permission({ name: 'ban_user', identify: 'user:banUser', action: 'update' })\n    async banUser(req, body: { userId: number }): Promise<CommonResult> {\n        await this.userService.recycleOrBanUser(body.userId, 'recycle');\n        return { code: 200, message: t('Ban user successfully') };\n    }\n\n    @Mutation('recycleUser')\n    @Permission({ name: 'recycle_user', identify: 'user:recycleUser', action: 'update' })\n    async recycleUser(req, body: { userId: number }): Promise<CommonResult> {\n        await this.userService.recycleOrBanUser(body.userId, 'recycle');\n        return { code: 200, message: t('Delete user to recycle bin successfully') };\n    }\n\n    @Mutation('deleteRecycledUser')\n    @Permission({ name: 'delete_recycled_user', identify: 'user:deleteRecycledUser', action: 'delete' })\n    async deleteRecycledUser(req, body: { userId: number }): Promise<CommonResult> {\n        await this.userService.deleteUser(body.userId);\n        return { code: 200, message: t('Delete user in the recycle bin successfully') };\n    }\n\n    @Mutation('revertBannedUser')\n    @Permission({ name: 'revert_banned_user', identify: 'user:revertBannedUser', action: 'update' })\n    async revertBannedUser(req, body: { userId: number }): Promise<CommonResult> {\n        await this.userService.revertBannedOrRecycledUser(body.userId, 'banned');\n        return { code: 200, message: t('Revert banned user successfully') };\n    }\n\n    @Mutation('revertRecycledUser')\n    @Permission({ name: 'revert_recycled_user', identify: 'user:revertRecycledUser', action: 'update' })\n    async revertRecycledUser(req, body: { userId: number }): Promise<CommonResult> {\n        await this.userService.revertBannedOrRecycledUser(body.userId, 'recycled');\n        return { code: 200, message: t('Revert recycled user successfully') };\n    }\n\n    @Mutation('updateUserInfoById')\n    @Permission({ name: 'update_user_info_by_id', identify: 'user:updateUserInfoById', action: 'update' })\n    async updateUserInfo(req, body: { userId: number, updateUserInput: UpdateUserInput }): Promise<CommonResult> {\n        await this.userService.updateUserInfo(body.userId, body.updateUserInput);\n        return { code: 200, message: t('Update user information successfully') };\n    }\n\n    @Mutation('updateCurrentUserInfo')\n    async updateCurrentUserInfo(req, body: { updateCurrentUserInput: UpdateUserInput }, context): Promise<CommonResult> {\n        await this.userService.updateUserInfo(context.user.id, body.updateCurrentUserInput);\n        return { code: 200, message: t('Update current login user information successfully') };\n    }\n\n    @Query('findUserInfoByIds')\n    @Permission({ name: 'find_user_info_by_ids', identify: 'user:findUserInfoByIds', action: 'find' })\n    async findUserInfoById(req, body: { userIds: number[] }): Promise<CommonResult> {\n        const data = await this.userService.findUserInfoById(body.userIds) as UserInfoData[];\n        return { code: 200, message: t('Query the specified users information successfully'), data };\n    }\n\n    @Query('findCurrentUserInfo')\n    async findCurrentUserInfo(req, body, context): Promise<CommonResult> {\n        const data = await this.userService.findUserInfoById(context.user.id) as UserInfoData;\n        return { code: 200, message: t('Query the current login user information successfully'), data };\n    }\n\n    @Query('findRegisterUserInfoItem')\n    async findRegisterUserInputInfo(): Promise<CommonResult> {\n        const data = await this.userService.findOneWithInfoItemsByRoleIds([1]);\n        return { code: 200, message: t('Query user registration information item successfully'), data };\n    }\n\n    @Query('findUsersInRole')\n    @Permission({ name: 'find_users_in_role', identify: 'user:findUsersInRole', action: 'find' })\n    async findUsersInRole(req, body: { roleId: number }): Promise<CommonResult> {\n        const data = await this.userService.findByRoleId(body.roleId);\n        return { code: 200, message: t('Query the user under the role successfully'), data };\n    }\n\n    @Query('findUsersInOrganization')\n    @Permission({ name: 'find_users_in_organization', identify: 'user:findUsersInOrganization', action: 'find' })\n    async findUsersInOrganization(req, body: { organizationId: number }): Promise<CommonResult> {\n        const data = await this.userService.findByOrganizationId(body.organizationId);\n        return { code: 200, message: t('Query users under the organization successfully'), data };\n    }\n}"]}