{"version":3,"sources":["../src/resolvers/info-group.resolver.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAElE,qBAEa,iBAAiB;IAEI,OAAO,CAAC,QAAQ,CAAC,gBAAgB;gBAAhB,gBAAgB,EAAE,gBAAgB;IAK3E,eAAe,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,IAAI,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOnF,eAAe,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,OAAO,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOtE,eAAe,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAC;QAAC,MAAM,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOpG,sBAAsB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,WAAW,EAAE,MAAM,EAAE,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOxG,2BAA2B,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,WAAW,EAAE,MAAM,CAAC;QAAC,WAAW,EAAE,MAAM,EAAE,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO7G,gBAAgB,IAAI,OAAO,CAAC,YAAY,CAAC;IAOzC,sBAAsB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,OAAO,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;CAItF","file":"info-group.resolver.d.ts","sourcesContent":["import { Inject } from '@nestjs/common';\nimport { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { InfoGroupService } from '../services/info-group.service';\n\n@Resolver()\n@Resource({ name: 'info_group_manage', identify: 'infoGroup:manage' })\nexport class InfoGroupResolver {\n    constructor(\n        @Inject(InfoGroupService) private readonly infoGroupService: InfoGroupService\n    ) { }\n\n    @Mutation('createInfoGroup')\n    @Permission({ name: 'create_info_group', identify: 'infoGroup:createInfoGroup', action: 'create' })\n    async createInfoGroup(req, body: { name: string, roleId: number }): Promise<CommonResult> {\n        await this.infoGroupService.create(body.name, body.roleId);\n        return { code: 200, message: t('Create a information group successfully') };\n    }\n\n    @Mutation('deleteInfoGroup')\n    @Permission({ name: 'delete_info_group', identify: 'infoGroup:deleteInfoGroup', action: 'delete' })\n    async deleteInfoGroup(req, body: { groupId: number }): Promise<CommonResult> {\n        await this.infoGroupService.delete(body.groupId);\n        return { code: 200, message: t('Deleted the information group successfully') };\n    }\n\n    @Mutation('updateInfoGroup')\n    @Permission({ name: 'update_info_group', identify: 'infoGroup:updateInfoGroup', action: 'update' })\n    async updateInfoGroup(req, body: { groupId: number, name: string, roleId: number }): Promise<CommonResult> {\n        await this.infoGroupService.update(body.groupId, body.name, body.roleId);\n        return { code: 200, message: t('Update the information group successfully') };\n    }\n\n    @Mutation('addInfoItemToInfoGroup')\n    @Permission({ name: 'add_info_item_to_info_group', identify: 'infoGroup:addInfoItemToInfoGroup', action: 'create' })\n    async addInfoItemToInfoGroup(req, body: { infoGroupId: number, infoItemIds: number[] }): Promise<CommonResult> {\n        await this.infoGroupService.addInfoItem(body.infoGroupId, body.infoItemIds);\n        return { code: 200, message: t('Add an information item to the information group successfully') };\n    }\n\n    @Mutation('deleteIntoItemFromInfoGroup')\n    @Permission({ name: 'delete_into_item_from_info_group', identify: 'infoGroup:deleteIntoItemFromInfoGroup', action: 'delete' })\n    async deleteIntoItemFromInfoGroup(req, body: { infoGroupId: number, infoItemIds: number[] }): Promise<CommonResult> {\n        await this.infoGroupService.deleteIntoItem(body.infoGroupId, body.infoItemIds);\n        return { code: 200, message: t('Delete the information item in the information group successfully') };\n    }\n\n    @Query('findAllInfoGroup')\n    @Permission({ name: 'find_all_info_group', identify: 'infoGroup:findAllInfoGroup', action: 'find' })\n    async findAllInfoGroup(): Promise<CommonResult> {\n        const data = await this.infoGroupService.findAll();\n        return { code: 200, message: t('Query all information groups successfully'), data };\n    }\n\n    @Query('findInfoItemsByGroupId')\n    @Permission({ name: 'find_info_items_by_group_id', identify: 'infoGroup:findInfoItemsByGroupId', action: 'find' })\n    async findInfoItemsByGroupId(req, body: { groupId: number }): Promise<CommonResult> {\n        const data = await this.infoGroupService.findItemsById(body.groupId);\n        return { code: 200, message: t('Query the information item in the information group successfully'), data };\n    }\n}"]}