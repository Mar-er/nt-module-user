{"version":3,"sources":["../src/resolvers/organization.resolver.ts"],"names":[],"mappings":"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","file":"organization.resolver.js","sourcesContent":["import { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { OrganizationService } from './../services/organization.service';\n\n@Resolver()\n@Resource({ name: 'organization_manage', identify: 'organization:manage' })\nexport class OrganizationResolver {\n    constructor(\n        private readonly organizationService: OrganizationService\n    ) { }\n\n    @Query('findRootOrganizations')\n    @Permission({ name: 'find_root_organizations', identify: 'organization:findRootOrganizations', action: 'find' })\n    async findRootOrganizations(): Promise<CommonResult> {\n        const data = await this.organizationService.findRoots();\n        return { code: 200, message: t('Get the root organization successfully'), data };\n    }\n\n    @Query('findAllOrganizations')\n    @Permission({ name: 'find_all_organizations', identify: 'organization:findAllOrganizations', action: 'find' })\n    async findAllOrganizations(): Promise<CommonResult> {\n        const data = await this.organizationService.findAllTrees();\n        return { code: 200, message: t('Get all organizations successful'), data };\n    }\n\n    @Query('findChildrenOrganizations')\n    @Permission({ name: 'find_children_organizations', identify: 'organization:findChildrenOrganizations', action: 'find' })\n    async findChildrenOrganizations(req, body: { id: number }): Promise<CommonResult> {\n        const data = await this.organizationService.findChildren(body.id);\n        return { code: 200, message: t('Get all sub-organizations below the organization successfully'), data };\n    }\n\n    @Mutation('createOrganization')\n    @Permission({ name: 'create_organization', identify: 'organization:createOrganization', action: 'create' })\n    async createOrganization(req, body: { name: string, parentId: number }): Promise<CommonResult> {\n        await this.organizationService.createOrganization(body.name, body.parentId);\n        return { code: 200, message: t('Create an organizational successfully') };\n    }\n\n    @Mutation('updateOrganization')\n    @Permission({ name: 'update_organization', identify: 'organization:updateOrganization', action: 'update' })\n    async updateOrganization(req, body: { id: number, name: string, parentId: number }): Promise<CommonResult> {\n        await this.organizationService.updateOrganization(body.id, body.name, body.parentId);\n        return { code: 200, message: t('Update organization successfully') };\n    }\n\n    @Mutation('deleteOrganization')\n    @Permission({ name: 'delete_organization', identify: 'organization:deleteOrganization', action: 'delete' })\n    async deleteOrganization(req, body: { id: number }): Promise<CommonResult> {\n        await this.organizationService.deleteOrganization(body.id);\n        return { code: 200, message: t('Delete organization successfully\"') };\n    }\n\n    @Mutation('addUsersToOrganization')\n    @Permission({ name: 'add_users_to_organization', identify: 'organization:addUsersToOrganization', action: 'create' })\n    async addUsersToOrganization(req, body: { id: number, userIds: number[] }): Promise<CommonResult> {\n        await this.organizationService.addUsersToOrganization(body.id, body.userIds);\n        return { code: 200, message: t('Add users to your organization successfully') };\n    }\n\n    @Mutation('deleteUserFromOrganization')\n    @Permission({ name: 'delete_user_from_organization', identify: 'organization:deleteUserFromOrganization', action: 'delete' })\n    async deleteUserFromOrganization(req, body: { id: number, userIds: number[] }): Promise<CommonResult> {\n        await this.organizationService.deleteUserFromOrganization(body.id, body.userIds);\n        return { code: 200, message: t('Delete users from your organization successfully') };\n    }\n}"]}