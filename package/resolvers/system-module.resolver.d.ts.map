{"version":3,"sources":["../src/resolvers/system-module.resolver.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAExE,qBAEa,oBAAoB;IAEI,OAAO,CAAC,QAAQ,CAAC,mBAAmB;gBAAnB,mBAAmB,EAAE,mBAAmB;IAKpF,iBAAiB,IAAI,OAAO,CAAC,YAAY,CAAC;CAInD","file":"system-module.resolver.d.ts","sourcesContent":["import { Inject } from '@nestjs/common';\nimport { Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { SystemModuleService } from '../services/system-module.service';\n\n@Resolver()\n@Resource({ name: 'system_module_manage', identify: 'systemModule:manage' })\nexport class SystemModuleResolver {\n    constructor(\n        @Inject(SystemModuleService) private readonly systemModuleService: SystemModuleService\n    ) { }\n\n    @Query('findSystemModules')\n    @Permission({ name: 'find_system_modules', identify: 'systemModule:findSystemModules', action: 'find' })\n    async findSystemModules(): Promise<CommonResult> {\n        const data = await this.systemModuleService.findSystemModules();\n        return { code: 200, message: t('Query the system modules successfully'), data };\n    }\n}"]}