{"version":3,"sources":["../src/resolvers/role.resolver.ts"],"names":[],"mappings":"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","file":"role.resolver.js","sourcesContent":["import { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { RoleService } from './../services/role.service';\n\n@Resolver()\n@Resource({ name: 'role_manage', identify: 'role:manage' })\nexport class RoleResolver {\n    constructor(\n        private readonly roleService: RoleService\n    ) { }\n\n    @Mutation('createRole')\n    @Permission({ name: 'create_role', identify: 'role:createRole', action: 'create' })\n    async createRole(req, body: { name: string }): Promise<CommonResult> {\n        await this.roleService.createRole(body.name);\n        return { code: 200, message: t('Create a role successfully') };\n    }\n\n    @Mutation('deleteRole')\n    @Permission({ name: 'delete_role', identify: 'role:deleteRole', action: 'delete' })\n    async deleteRole(req, body: { id: number }): Promise<CommonResult> {\n        await this.roleService.deleteRole(body.id);\n        return { code: 200, message: t('Delete role successfully') };\n    }\n\n    @Mutation('updateRole')\n    @Permission({ name: 'update_role', identify: 'role:updateRole', action: 'update' })\n    async updateRole(req, body: { id: number, name: string }): Promise<CommonResult> {\n        await this.roleService.updateRole(body.id, body.name);\n        return { code: 200, message: t('Update role successfully') };\n    }\n\n    @Mutation('setPermissionsToRole')\n    @Permission({ name: 'set_permissions_to_role', identify: 'role:setPermissionsToRole', action: 'create' })\n    async setPermissionsToRole(req, body: { roleId: number, permissionIds: number[] }): Promise<CommonResult> {\n        await this.roleService.setPermissions(body.roleId, body.permissionIds);\n        return { code: 200, message: t('Set role permissions successfully') };\n    }\n\n    @Query('findRoles')\n    @Permission({ name: 'find_roles', identify: 'role:findRoles', action: 'find' })\n    async findRoles(): Promise<CommonResult> {\n        const data = await this.roleService.findRoles();\n        return { code: 200, message: t('Query all roles successfully'), data };\n    }\n\n    @Query('findOneRoleInfo')\n    @Permission({ name: 'find_one_role_info', identify: 'role:findOneRoleInfo', action: 'find' })\n    async findOneRoleInfo(req, body: { roleId: number }): Promise<CommonResult> {\n        const data = await this.roleService.findOneRoleInfo(body.roleId);\n        return { code: 200, message: t('Query role information successfully'), data };\n    }\n}"]}