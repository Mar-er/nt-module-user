{"version":3,"sources":["../src/resolvers/resource.resolver.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAE/D,qBAEa,gBAAgB;IAErB,OAAO,CAAC,QAAQ,CAAC,eAAe;gBAAf,eAAe,EAAE,eAAe;IAK/C,aAAa,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,cAAc,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;CAIpF","file":"resource.resolver.d.ts","sourcesContent":["import { Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { ResourceService } from '../services/resource.service';\n\n@Resolver()\n@Resource({ name: 'resource_manage', identify: 'resource:manage' })\nexport class ResourceResolver {\n    constructor(\n        private readonly resourceService: ResourceService\n    ) { }\n\n    @Query('findResources')\n    @Permission({ name: 'find_resources', identify: 'resource:findResources', action: 'find' })\n    async findResources(req, body: { systemModuleId: number }): Promise<CommonResult> {\n        const data = await this.resourceService.findResources(body.systemModuleId);\n        return { code: 200, message: t('Query the resource successfully'), data };\n    }\n}"]}