{"version":3,"sources":["../src/resolvers/role.resolver.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAEzD,qBAEa,YAAY;IAEjB,OAAO,CAAC,QAAQ,CAAC,WAAW;gBAAX,WAAW,EAAE,WAAW;IAKvC,UAAU,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO9D,UAAU,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO5D,UAAU,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,EAAE,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAO1E,oBAAoB,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,MAAM,EAAE,MAAM,CAAC;QAAC,aAAa,EAAE,MAAM,EAAE,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;IAOnG,SAAS,IAAI,OAAO,CAAC,YAAY,CAAC;IAOlC,eAAe,CAAC,GAAG,KAAA,EAAE,IAAI,EAAE;QAAE,MAAM,EAAE,MAAM,CAAA;KAAE,GAAG,OAAO,CAAC,YAAY,CAAC;CAI9E","file":"role.resolver.d.ts","sourcesContent":["import { Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { __ as t } from 'i18n';\n\nimport { Permission, Resource } from '../decorators';\nimport { CommonResult } from '../interfaces/common-result.interface';\nimport { RoleService } from './../services/role.service';\n\n@Resolver()\n@Resource({ name: 'role_manage', identify: 'role:manage' })\nexport class RoleResolver {\n    constructor(\n        private readonly roleService: RoleService\n    ) { }\n\n    @Mutation('createRole')\n    @Permission({ name: 'create_role', identify: 'role:createRole', action: 'create' })\n    async createRole(req, body: { name: string }): Promise<CommonResult> {\n        await this.roleService.createRole(body.name);\n        return { code: 200, message: t('Create a role successfully') };\n    }\n\n    @Mutation('deleteRole')\n    @Permission({ name: 'delete_role', identify: 'role:deleteRole', action: 'delete' })\n    async deleteRole(req, body: { id: number }): Promise<CommonResult> {\n        await this.roleService.deleteRole(body.id);\n        return { code: 200, message: t('Delete role successfully') };\n    }\n\n    @Mutation('updateRole')\n    @Permission({ name: 'update_role', identify: 'role:updateRole', action: 'update' })\n    async updateRole(req, body: { id: number, name: string }): Promise<CommonResult> {\n        await this.roleService.updateRole(body.id, body.name);\n        return { code: 200, message: t('Update role successfully') };\n    }\n\n    @Mutation('setPermissionsToRole')\n    @Permission({ name: 'set_permissions_to_role', identify: 'role:setPermissionsToRole', action: 'create' })\n    async setPermissionsToRole(req, body: { roleId: number, permissionIds: number[] }): Promise<CommonResult> {\n        await this.roleService.setPermissions(body.roleId, body.permissionIds);\n        return { code: 200, message: t('Set role permissions successfully') };\n    }\n\n    @Query('findRoles')\n    @Permission({ name: 'find_roles', identify: 'role:findRoles', action: 'find' })\n    async findRoles(): Promise<CommonResult> {\n        const data = await this.roleService.findRoles();\n        return { code: 200, message: t('Query all roles successfully'), data };\n    }\n\n    @Query('findOneRoleInfo')\n    @Permission({ name: 'find_one_role_info', identify: 'role:findOneRoleInfo', action: 'find' })\n    async findOneRoleInfo(req, body: { roleId: number }): Promise<CommonResult> {\n        const data = await this.roleService.findOneRoleInfo(body.roleId);\n        return { code: 200, message: t('Query role information successfully'), data };\n    }\n}"]}