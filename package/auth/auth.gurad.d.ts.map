{"version":3,"sources":["../src/auth/auth.gurad.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAc,MAAM,gBAAgB,CAAC;AAO3E,qBACa,SAAU,YAAW,WAAW;IACnC,WAAW,CAAC,OAAO,EAAE,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC;CAmBjE","file":"auth.gurad.d.ts","sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\nimport { PERMISSION_DEFINITION } from '../decorators';\nimport { Permission } from '../entities/permission.entity';\nimport { User } from '../entities/user.entity';\n\n@Injectable()\nexport class AuthGurad implements CanActivate {\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const gqlCtx = GqlExecutionContext.create(context);\n\n        const user: User = gqlCtx.getContext().user;\n\n        if (user && user.username === 'sadmin') return true;\n\n        const userPerm: string[] = [];\n        user && user.roles.forEach(role => {\n            role.permissions.forEach(permission => {\n                userPerm.push(permission.identify);\n            });\n        });\n        const handlerPerm = <Permission>Reflect.getMetadata(PERMISSION_DEFINITION, context.getClass().prototype, context.getHandler().name);\n        if (handlerPerm && !userPerm.includes(handlerPerm.identify)) {\n            return false;\n        }\n        return true;\n    }\n}"]}